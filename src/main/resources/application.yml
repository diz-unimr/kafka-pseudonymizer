spring:
  jmx:
    enabled: true
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVERS:localhost:9092}
    security.protocol: ${SECURITY_PROTOCOL:PLAINTEXT}
    ssl:
      trust-store-location: file://${SSL_TRUST_STORE_LOCATION_INTERNAL:/opt/kafka-pseudonymizer/ssl/truststore.jks}
      trust-store-password: ${SSL_TRUST_STORE_PASSWORD}
      key-store-location: file://${SSL_KEY_STORE_LOCATION_INTERNAL:/opt/kafka-pseudonymizer/ssl/keystore.jks}
      key-store-password: ${SSL_KEY_STORE_PASSWORD}
    producer:
      compression-type: gzip
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.miracum.kafka.serializers.KafkaFhirSerializer

  cloud:
    stream:
      bindings:
        process-in-0:
          destination: ${INPUT_TOPICS:^(?=.*-fhir)(?!.*fhir-psn).*}
          group: pseudonymizer
          consumer:
            useNativeDecoding: true
            concurrency: ${CONSUMER_THREADS:-4}
        process-out-0:
          producer:
            useNativeEncoding: true
      kafka:
        bindings:
          process-in-0:
            consumer:
              destination-is-pattern: ${INPUT_IS_PATTERN:true}
              configuration:
                key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value.deserializer: org.miracum.kafka.serializers.KafkaFhirDeserializer

        binder:
          minPartitionCount: 3

services:
  pseudonymizer:
    url: "http://localhost:5000/fhir"
    replace-security-tag: true

  kafka:
    output-topic:
      match-expression: "-fhir-idat"
      replace-with: "-fhir-idat-psn"

management:
  server:
    port: 8080
  endpoints:
    web:
      exposure:
        include: "health, prometheus, info, metric"
  endpoint:
    health:
      show-details: always

logging:
  level:
    org.springframework.kafka.config: info
    de.unimarburg.diz.kafkapseudonymizer: info
